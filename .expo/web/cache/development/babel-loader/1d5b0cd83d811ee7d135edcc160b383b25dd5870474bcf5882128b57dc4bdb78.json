{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport DietScreen from \"../screens/DietScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport DoctorProfileScreen from \"../screens/DoctorProfileScreen\";\nimport { getAuth, createUserWithEmailAndPassword, firestore } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, addDoc, collection, query, where, getDocs, length, get, async } from \"firebase/firestore\";\nimport app from \"../../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar auth = getAuth(app);\nvar db = getFirestore();\nvar Tab = createBottomTabNavigator();\nvar Stack = createNativeStackNavigator();\nvar user = auth.currentUser;\nvar HomeStackNavigator = function HomeStackNavigator() {\n  return _jsx(Stack.Navigator, {\n    children: _jsx(Stack.Screen, {\n      name: \"HomeStack\",\n      component: HomeScreen,\n      options: {\n        headerShown: false\n      }\n    })\n  });\n};\nvar decideprofile = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var user = auth.currentUser;\n    var patientsCollection = collection(db, \"patients\");\n    var therapistCollection = collection(db, \"therapist\");\n    var patientQuery = query(patientsCollection, where(\"email\", \"==\", user.email));\n    var patientQuerySnapshot = yield getDocs(patientQuery);\n    if (patientQuerySnapshot.docs && patientQuerySnapshot.docs.length > 0) {\n      console.log('User found in the \"patients\" collection');\n      return 0;\n    } else {\n      var therapistQuery = query(therapistCollection, where(\"email\", \"==\", user.email));\n      var therapistQuerySnapshot = yield getDocs(therapistQuery);\n      if (therapistQuerySnapshot.docs && therapistQuerySnapshot.docs.length > 0) {\n        console.log('User found in the \"therapists\" collection');\n        return 1;\n      } else {\n        console.log('User not found in both \"patients\" and \"therapists\" collections');\n      }\n    }\n  });\n  return function decideprofile() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar HomeTabNavigator = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userType = _useState2[0],\n      setUserType = _useState2[1];\n    useEffect(function () {\n      var fetchData = function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          try {\n            var _result = yield decideprofile();\n            setUserType(_result);\n          } catch (error) {\n            console.error('Error in HomeTabNavigator:', error);\n          }\n        });\n        return function fetchData() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      fetchData();\n    }, []);\n    if (result == 0) {\n      console.log('we did it boys');\n      return _jsxs(Tab.Navigator, {\n        screenOptions: function screenOptions(_ref4) {\n          var route = _ref4.route;\n          return {\n            tabBarIcon: function tabBarIcon(_ref5) {\n              var focused = _ref5.focused,\n                color = _ref5.color,\n                size = _ref5.size;\n              var iconName;\n              if (route.name === \"Home\") {\n                iconName = \"md-home-outline\";\n              } else if (route.name === \"Diet\") {\n                iconName = \"md-restaurant-outline\";\n              } else if (route.name === \"Profile\") {\n                iconName = \"md-person-outline\";\n              }\n              return _jsx(Ionicons, {\n                name: iconName,\n                size: size,\n                color: color\n              });\n            },\n            tabBarActiveTintColor: \"#216afc\",\n            tabBarInactiveTintColor: \"gray\",\n            headerShown: false\n          };\n        },\n        children: [_jsx(Tab.Screen, {\n          name: \"Home\",\n          component: HomeStackNavigator,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Tab.Screen, {\n          name: \"Healthy Life\",\n          component: DietScreen\n        }), _jsx(Tab.Screen, {\n          name: \"Profile\",\n          component: ProfileScreen,\n          options: {\n            headerShown: true,\n            headerTitle: \"Personal Infomation\",\n            headerTitleAlign: \"center\"\n          }\n        })]\n      });\n    } else if (result == 1) {\n      console.log('This function runs');\n      return _jsxs(Tab.Navigator, {\n        screenOptions: function screenOptions(_ref6) {\n          var route = _ref6.route;\n          return {\n            tabBarIcon: function tabBarIcon(_ref7) {\n              var focused = _ref7.focused,\n                color = _ref7.color,\n                size = _ref7.size;\n              var iconName;\n              if (route.name === \"Home\") {\n                iconName = \"md-home-outline\";\n              } else if (route.name === \"Diet\") {\n                iconName = \"md-restaurant-outline\";\n              } else if (route.name === \"Profile\") {\n                iconName = \"md-person-outline\";\n              }\n              return _jsx(Ionicons, {\n                name: iconName,\n                size: size,\n                color: color\n              });\n            },\n            tabBarActiveTintColor: \"#216afc\",\n            tabBarInactiveTintColor: \"gray\",\n            headerShown: false\n          };\n        },\n        children: [_jsx(Tab.Screen, {\n          name: \"Home\",\n          component: HomeStackNavigator,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Tab.Screen, {\n          name: \"Healthy Life\",\n          component: DietScreen\n        }), _jsx(Tab.Screen, {\n          name: \"DoctorProfile\",\n          component: DoctorProfileScreen,\n          options: {\n            headerShown: true,\n            headerTitle: \"Personal Infomation\",\n            headerTitleAlign: \"center\"\n          }\n        })]\n      });\n    }\n  });\n  return function HomeTabNavigator() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default HomeTabNavigator;","map":{"version":3,"names":["useEffect","useState","createBottomTabNavigator","createNativeStackNavigator","Ionicons","DietScreen","HomeScreen","ProfileScreen","DoctorProfileScreen","getAuth","createUserWithEmailAndPassword","firestore","getFirestore","doc","getDoc","addDoc","collection","query","where","getDocs","length","get","async","app","jsx","_jsx","jsxs","_jsxs","auth","db","Tab","Stack","user","currentUser","HomeStackNavigator","Navigator","children","Screen","name","component","options","headerShown","decideprofile","_ref","_asyncToGenerator","patientsCollection","therapistCollection","patientQuery","email","patientQuerySnapshot","docs","console","log","therapistQuery","therapistQuerySnapshot","apply","arguments","HomeTabNavigator","_ref2","_useState","_useState2","_slicedToArray","userType","setUserType","fetchData","_ref3","result","error","screenOptions","_ref4","route","tabBarIcon","_ref5","focused","color","size","iconName","tabBarActiveTintColor","tabBarInactiveTintColor","headerTitle","headerTitleAlign","_ref6","_ref7"],"sources":["/Users/danle/Documents/GitHub/nativeOTapp/components/navigation/TabNavigator.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\nimport DietScreen from \"../screens/DietScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport DoctorProfileScreen from \"../screens/DoctorProfileScreen\";\nimport {\n  getAuth,\n  createUserWithEmailAndPassword,\n  firestore,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  addDoc,\n  collection,\n  query,\n  where,\n  getDocs,\n  length,\n  get,\n  async,\n} from \"firebase/firestore\";\nimport app from \"../../firebase\";\n\nconst auth = getAuth(app); // Initialize Firebase Authentication\nconst db = getFirestore();\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\nconst user = auth.currentUser;\n\nconst HomeStackNavigator = () => {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"HomeStack\"\n        component={HomeScreen}\n        options={{ headerShown: false }}\n      />\n  \n    </Stack.Navigator>\n  );\n};\nconst decideprofile = async () => {\n  const user = auth.currentUser;\n  const patientsCollection = collection(db, \"patients\");\n  const therapistCollection = collection(db, \"therapist\"); // Corrected collection name\n    const patientQuery = query(patientsCollection, where(\"email\", \"==\", user.email));\n    const patientQuerySnapshot = await getDocs(patientQuery);\n    if (patientQuerySnapshot.docs && patientQuerySnapshot.docs.length > 0) {\n      // User found in the \"patients\" collection\n      console.log('User found in the \"patients\" collection');\n      return 0;\n    } else {\n      // User not found in the \"patients\" collection, check \"therapists\" collection\n      const therapistQuery = query(therapistCollection, where(\"email\", \"==\", user.email));\n      const therapistQuerySnapshot = await getDocs(therapistQuery);\n\n      if (therapistQuerySnapshot.docs && therapistQuerySnapshot.docs.length > 0) {\n        // User found in the \"therapists\" collection\n        console.log('User found in the \"therapists\" collection');\n        return 1;\n      } else {\n        // User not found in either collection\n        console.log('User not found in both \"patients\" and \"therapists\" collections');\n      }\n    }\n} \n\nconst HomeTabNavigator = async () => {\n  const [userType, setUserType] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await decideprofile();\n        setUserType(result);\n      } catch (error) {\n        console.error('Error in HomeTabNavigator:', error);\n        // Handle the error as needed\n      }\n    };\n\n    fetchData();\n  }, []);\n  if(result == 0){\n    console.log('we did it boys');\n    return (\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === \"Home\") {\n            iconName = \"md-home-outline\";\n        \n            } else if (route.name === \"Diet\") {\n            iconName = \"md-restaurant-outline\";\n            } else if (route.name === \"Profile\") {\n            iconName = \"md-person-outline\";\n            }\n\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: \"#216afc\",\n          tabBarInactiveTintColor: \"gray\",\n          headerShown: false,\n        })}\n      >\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackNavigator}\n          options={{ headerShown: false }}\n        />\n    \n        <Tab.Screen name=\"Healthy Life\" component={DietScreen} />\n        <Tab.Screen\n          name=\"Profile\"\n          component={ProfileScreen}\n          options={{\n            headerShown: true,\n            headerTitle: \"Personal Infomation\",\n            headerTitleAlign: \"center\",\n          }}\n        />\n\n      \n    </Tab.Navigator>\n    );\n  }else if(result == 1){\n    console.log('This function runs');\n    return (\n      <Tab.Navigator\n        screenOptions={({ route }) => ({\n          tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n\n            if (route.name === \"Home\") {\n            iconName = \"md-home-outline\";\n        \n            } else if (route.name === \"Diet\") {\n            iconName = \"md-restaurant-outline\";\n            } else if (route.name === \"Profile\") {\n            iconName = \"md-person-outline\";\n            }\n\n            return <Ionicons name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: \"#216afc\",\n          tabBarInactiveTintColor: \"gray\",\n          headerShown: false,\n        })}\n      >\n        <Tab.Screen\n          name=\"Home\"\n          component={HomeStackNavigator}\n          options={{ headerShown: false }}\n        />\n    \n        <Tab.Screen name=\"Healthy Life\" component={DietScreen} />\n        <Tab.Screen\n        name=\"DoctorProfile\"\n        component={DoctorProfileScreen}\n        options={{\n          headerShown: true,\n          headerTitle: \"Personal Infomation\",\n          headerTitleAlign: \"center\",\n        }}\n      />\n    </Tab.Navigator>\n    )\n  }\n};\n\nexport default HomeTabNavigator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}